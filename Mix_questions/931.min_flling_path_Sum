class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int ans = Integer.MAX_VALUE;
        int[][] dp = new int[matrix.length][matrix[0].length];
        for (int[] a : dp) {
            Arrays.fill(a, -66666);
        }
        for (int col = 0; col < matrix[0].length; col++) {
            ans = Math.min(ans, Fall(matrix, 0, col, dp));
        }
        return ans;
    }

    public static int Fall(int[][] arr, int cr, int cc, int[][] dp) {
        if (cc < 0 || cc >= arr[0].length) {
            return Integer.MAX_VALUE;
        }
        if (cr == arr.length - 1) {
            return arr[cr][cc];
        }
        if (dp[cr][cc] != -66666) {
            return dp[cr][cc];
        }
        int dl = Fall(arr, cr + 1, cc - 1, dp);
        int dr = Fall(arr, cr + 1, cc + 1, dp);
        int down = Fall(arr, cr + 1, cc, dp);
        return dp[cr][cc] = Math.min(dl, Math.min(dr, down)) + arr[cr][cc];
    }
}
