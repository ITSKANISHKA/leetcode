class Solution {
    public int minFallingPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < m; i++) {
            ans = Math.min(ans, Falling(grid, 0, i, dp));
        }
        return ans;
    }
    public int Falling(int[][] arr, int cr, int cc, int[][] dp) {
        int n = arr.length;
        int m = arr[0].length;
        if (cr == n - 1) {
            return arr[cr][cc];
        }
        if (dp[cr][cc] != Integer.MAX_VALUE) {
            return dp[cr][cc];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < m; i++) {
            if (i != cc) { 
                ans = Math.min(ans, Falling(arr, cr + 1, i, dp));
            }
        }
        dp[cr][cc] = ans + arr[cr][cc];
        return dp[cr][cc];
    }
}
