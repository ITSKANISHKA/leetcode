class Solution {
    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<Integer> current = new ArrayList<>();
        helper(candidates, target, 0, 0, current);
        return ans;
    }

    void helper(int[] candidates, int target, int sum, int idx, List<Integer> current) {
        if (sum > target) return;  // Prune the branch if sum exceeds target

        if (sum == target) {
            ans.add(new ArrayList<>(current));  // Found a valid combination
            return;
        }

        for (int i = idx; i < candidates.length; i++) {
            current.add(candidates[i]);  // Choose the candidate
            helper(candidates, target, sum + candidates[i], i, current);  // Reuse allowed, so pass i
            current.remove(current.size() - 1);  // Backtrack
        }
    }
}
