class Solution {
    public int coinChange(int[] coins, int amount) {
        // if(amount == 0) return 0;
        // int n = coins.length;
        // int[][] dp = new int[n][amount + 1];

        // for(int[] row: dp) Arrays.fill(row, -1);

        // int ans = memoization(coins, amount, n - 1, dp);

        // if((int)ans >= Math.pow(10, 9)) return  -1;
        
        // return ans;
        return tabulation(coins, amount);
    }
    private int tabulation(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n][amount + 1];

        for(int i = 0; i <= amount; i++) {
            if(i % coins[0] == 0) dp[0][i] = i / coins[0];
            else dp[0][i] = (int)Math.pow(10, 9);
        }

        for(int ind = 1; ind < n; ind++) {
            for(int target = 0; target <= amount; target++) {
                int notTake = dp[ind - 1][target];
                int take = (int)Math.pow(10, 9);

                if(coins[ind] <= target) take = 1 + dp[ind][target - coins[ind]];

                dp[ind][target] = Math.min(take, notTake);
            }
        }

        int ans = dp[n - 1][amount];
        if((int)ans >= Math.pow(10, 9)) return -1;
        return ans;
    }
    private int memoization(int[] coins, int amount, int n, int[][] dp) {
        if(n == 0) {
            if(amount % coins[n] == 0) return amount / coins[n];
            else return (int)Math.pow(10, 9);
        }

        if(dp[n][amount] != -1) return dp[n][amount];

        int notPick = memoization(coins, amount, n - 1, dp);
        int pick = (int)Math.pow(10, 9);
        if(coins[n] <= amount) pick = 1 + memoization(coins, amount - coins[n], n, dp);

        dp[n][amount] = Math.min(pick, notPick);
        return dp[n][amount];
    }
}
